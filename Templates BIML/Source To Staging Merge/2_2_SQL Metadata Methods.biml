<#@ template language="C#" hostspecific="true"#>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Data.Odbc" #>

<#@include file="0_Parameters.biml"#>

<#

    if(CheckTablesList(sourceConnectionString, initialTableList, sourceDriverType) != 0)
    {
        initialTableList = Array.Empty<string[]>();
        
    };
    
            foreach (string[] initialTable in initialTableList)
            {


                var tableSchema = GetTableSchema(destinationConnectionString, "[" + initialTable[3] + "].[" + initialTable[1] + "]", destinationDriverType);
                foreach (DataRow column in tableSchema.Rows)
                {
                    if (Convert.ToBoolean(column["IsAutoIncrement"]))
                    {
                        throw new System.ArgumentException("The next table has an identity column in the destination" , "TableName: " + initialTable[1]  + "; ColumnName: " + column["ColumnName"]);

                    }

                }

            }
    


#>

<#+
    static int CheckTablesList(string connectionString, string[][] tableListToCheck, string driverType)
    {

        string[] tableRestrictions = new string[3];

        foreach (string[] initialTable in tableListToCheck)
        {
            if (driverType == "OleDb")
            {
                using (var AWConnection = new OleDbConnection(connectionString))
                {

                    tableRestrictions[1] = initialTable[0]; //Table Schema
                    tableRestrictions[2] = initialTable[1]; //Table Name


                    if (AWConnection.State == ConnectionState.Closed)
                    {
                        AWConnection.Open();
                    }

                    if (AWConnection.GetSchema(OleDbMetaDataCollectionNames.Tables, tableRestrictions).Rows.Count == 0)
                    {
                        throw new System.ArgumentException("Can't find all the specified tables in the Source", initialTable[1]);
                    };

                }
            }
            else if (driverType == "ODBC")
            {
                using (var AWConnection = new OdbcConnection(connectionString))
                {

                    tableRestrictions[1] = initialTable[0]; //Table Schema
                    tableRestrictions[2] = initialTable[1]; //Table Name


                    if (AWConnection.State == ConnectionState.Closed)
                    {
                        AWConnection.Open();
                    }

                    if (AWConnection.GetSchema(OdbcMetaDataCollectionNames.Tables, tableRestrictions).Rows.Count == 0)
                    {
                        throw new System.ArgumentException("Can't find all the specified tables in the Source", initialTable[1]);
                    };

                }
            }
        }
        return 0;
    }

#>

<#+
    static DataTable GetTableSchema(string connectionString, string tableName, string driverType)
    {

        var selectTable = "select * from " + tableName;
        DataTable schemaTable = new DataTable();

        if (driverType == "OleDb")
        {
            OleDbCommand cmd = new OleDbCommand();
            cmd.CommandText = selectTable;

            using (var AWConnection = new OleDbConnection(connectionString))
            {
                if (AWConnection.State == ConnectionState.Closed)
                {
                    AWConnection.Open();
                }

                cmd.Connection = AWConnection;
                cmd.CommandText = selectTable;
                var myReader = cmd.ExecuteReader(CommandBehavior.KeyInfo);

                //Retrieve column schema into a DataTable.
                schemaTable = myReader.GetSchemaTable();
            }
        }
        else if (driverType == "ODBC")
        {
            OdbcCommand cmd = new OdbcCommand();
            cmd.CommandText = selectTable;

            using (var AWConnection = new OdbcConnection(connectionString))
            {
                if (AWConnection.State == ConnectionState.Closed)
                {
                    AWConnection.Open();
                }

                cmd.Connection = AWConnection;
                cmd.CommandText = selectTable;
                var myReader = cmd.ExecuteReader(CommandBehavior.KeyInfo);

                //Retrieve column schema into a DataTable.
                schemaTable = myReader.GetSchemaTable();
            }
        }


        return schemaTable;
    }

 #>


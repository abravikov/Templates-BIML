<Biml xmlns="http://schemas.varigence.com/biml.xsd">

<#@include file="2_1_Variables Builder.biml"#>

<Connections>
    <OleDbConnection CreateInProject="true" Name="SourceDatabaseConnection" ConnectionString="<#=$"{sourceConnectionString};Provider=SQLNCLI11;"#>"></OleDbConnection>
    <OleDbConnection CreateInProject="true" Name="StagingDatabaseConnection" ConnectionString="<#=$"{destinationConnectionString};Provider=SQLNCLI11;"#>"></OleDbConnection>
</Connections>
<Projects>
    <PackageProject Name="Source To Staging" ProtectionLevel="DontSaveSensitive">
        <Parameters>
            <Parameter Name="SourceConnectionString" DataType="String"></Parameter>           
            <Parameter Name="SourcePassword" DataType="String"></Parameter>
            <Parameter Name="StagingConnectionString" DataType="String"></Parameter>           
            <Parameter Name="StagingPassword" DataType="String"></Parameter>
        </Parameters>
        <Packages>
<#
    foreach (string[] initialTable in initialTableList)
    {
        var packageName = $"{initialTable[3]}_{initialTable[1]}";
#>       
            <Package PackageName="<#=packageName#>"/>
<#}#>
        </Packages>

    </PackageProject>
</Projects>

<Packages>    
<#
    foreach (string[] initialTable in initialTableList)
    {
        var packageName = $"{initialTable[3]}_{initialTable[1]}";
        var sourceTableName = $"[{initialTable[0]}].[{initialTable[1]}]";
        var intermediateTableName = $"[{initialTable[3]}].[{initialTable[1]}_temp]";
        var intermediateDeleteTableName = $"[{initialTable[3]}].[{initialTable[1]}_temp_delete]";
        var destinationTableName = $"[{initialTable[3]}].[{initialTable[1]}]";
        var incrementalColumnName = $"[{initialTable[2]}]";
        bool isMerge = initialTable[4] == "MergeUpsert" || initialTable[4] == "MergeDelete" ? true : false;
        bool isDelete = initialTable[4] == "MergeDelete" ? true : false;
#>
    <Package Name="<#=packageName#>" ConstraintMode="Linear" ProtectionLevel="DontSaveSensitive">
        <Connections>
            <Connection ConnectionName="SourceDatabaseConnection">
                <Expressions>
                    <Expression ExternalProperty="ConnectionString">@[$Project::SourceConnectionString]</Expression>
                    <Expression ExternalProperty="Password">@[$Project::SourcePassword]</Expression>
                </Expressions>
            </Connection>
            <Connection ConnectionName="StagingDatabaseConnection">
                <Expressions>
                    <Expression ExternalProperty="ConnectionString">@[$Project::StagingConnectionString]</Expression>
                    <Expression ExternalProperty="Password">@[$Project::StagingPassword]</Expression>
                </Expressions>
            </Connection>
        </Connections>
        <Variables>
            <Variable Name="TableNameSource" DataType="String" EvaluateAsExpression="false"><#=sourceTableName#></Variable>
            <Variable Name="TableNameTemp" DataType="String" EvaluateAsExpression="false"><#=intermediateTableName#></Variable>
            <Variable Name="TableNameTarget" DataType="String" EvaluateAsExpression="false"><#=destinationTableName#></Variable>
            <Variable Name="SQL_truncate" DataType="String" EvaluateAsExpression="true"><#=GetSQLTruncate()#></Variable>
            <Variable Name="SQL_selectsource" DataType="String" EvaluateAsExpression="true"><#=GetSQLGetSourceData(incrementalColumnName)#></Variable>
            <Variable Name="StagingLoadDate" DataType="DateTime" EvaluateAsExpression="true">GETDATE()</Variable>
<#
if(isMerge == true)
{
#>
            <Variable Name="SQL_merge" DataType="String" EvaluateAsExpression="true"><#=GenerateMergeStatement(intermediateTableName, destinationTableName, destinationConnectionString, stagingLoadDateColumn)#></Variable>
<#
if(isDelete == true)
{
#>
    <Variable Name="TableNameTempDelete" DataType="String" EvaluateAsExpression="false"><#=intermediateDeleteTableName#></Variable>
    <Variable Name="SQL_selectsourcePK" DataType="String" EvaluateAsExpression="true"><#=GenerateSelectPKStatementForDelete(sourceTableName, sourceConnectionString)#></Variable>
    <Variable Name="SQL_mergeDelete" DataType="String" EvaluateAsExpression="true"><#=GenerateMergeStatementForDelete(intermediateDeleteTableName, destinationTableName, destinationConnectionString)#></Variable>
    <Variable Name="SQL_truncateDelete" DataType="String" EvaluateAsExpression="true"><#=GetSQLTruncateDelete()#></Variable>
<#
}
#>
<#
}
else
{
#>
            <Variable Name="SQL_switch" DataType="String" EvaluateAsExpression="true"><#=GetSQLSwitch()#></Variable>
<#
}
#>          
            

<#
if(incrementalColumnName != "[]")
{
#>
            <Variable Name="StagingMaxIncrementalValue" DataType="String" EvaluateAsExpression="false">19000101</Variable>
            <Variable Name="SQL_getStagingMaxIncrementalValue" DataType="String" EvaluateAsExpression="true"><#=GetSQLGetStagingMaxIncrementalValue(sourceConnectionString, sourceTableName, incrementalColumnName)#></Variable>                
            <Variable Name="IncrementalColumnName" DataType="String" EvaluateAsExpression="false"><#=incrementalColumnName#></Variable>            
<#
}
#>
    

        </Variables>
        <Tasks>
<#
if(incrementalColumnName != "[]")
{
#>
            <ExecuteSQL Name="<#=$"Get Max Date From Target {packageName}"#>" ConnectionName="StagingDatabaseConnection" ResultSet="SingleRow">
                <VariableInput VariableName="User.SQL_getStagingMaxIncrementalValue"/>
                <Results>
                    <Result Name="md" VariableName="User.StagingMaxIncrementalValue"/>
                </Results>
            </ExecuteSQL>
<#
}
#>
            
            <ExecuteSQL Name="<#=$"Truncate Intermediate table {packageName}"#>" ConnectionName="StagingDatabaseConnection">
                <VariableInput VariableName="User.SQL_truncate"/>
            </ExecuteSQL>
            <Dataflow Name="Moving Data from Source to Intermediate table of Staging">
                <Transformations>
                    <OleDbSource Name="Query Source" ConnectionName="SourceDatabaseConnection">
                        <VariableInput VariableName="User.SQL_selectsource"/>
                    </OleDbSource>
                    <DerivedColumns Name="Add new columns">
                        <Columns>
                            <Column Name="<#=stagingLoadDateColumn#>" DataType="DateTime">@[User::StagingLoadDate]</Column>
                        </Columns>
                    </DerivedColumns>
                    <OleDbDestination Name="Feed Staging" ConnectionName="StagingDatabaseConnection" KeepIdentity="true">
                        <TableFromVariableOutput VariableName="User.TableNameTemp"/>
                    </OleDbDestination>
                </Transformations>
            </Dataflow>
<#
if(isMerge == true)
{
#>
            <ExecuteSQL Name="<#=$"MergeUpsert Intermediate table with Staging {packageName}"#>" ConnectionName="StagingDatabaseConnection">
                <VariableInput VariableName="User.SQL_merge"/>
            </ExecuteSQL>
<#
if(isDelete == true)
{
#>
            <ExecuteSQL Name="<#=$"Truncate before Delete Intermediate table {packageName}"#>" ConnectionName="StagingDatabaseConnection">
                <VariableInput VariableName="User.SQL_truncateDelete"/>
            </ExecuteSQL>
            <Dataflow Name="Moving Data Primary Key from Source to Intermediate table of Staging">
                <Transformations>
                    <OleDbSource Name="Query Source" ConnectionName="SourceDatabaseConnection">
                        <VariableInput VariableName="User.SQL_selectsourcePK"/>
                    </OleDbSource>
                    <OleDbDestination Name="Feed Staging" ConnectionName="StagingDatabaseConnection" KeepIdentity="true">
                        <TableFromVariableOutput VariableName="User.TableNameTempDelete"/>
                    </OleDbDestination>
                </Transformations>
            </Dataflow>
            <ExecuteSQL Name="<#=$"MergeDelete Intermediate table with Staging {packageName}"#>" ConnectionName="StagingDatabaseConnection">
                <VariableInput VariableName="User.SQL_mergeDelete"/>
            </ExecuteSQL>
            
<#
}
#>


<#
}
else
{
#>
            <ExecuteSQL Name="<#=$"Switch Partition of Intermediate table to Staging {packageName}"#>" ConnectionName="StagingDatabaseConnection">
                <VariableInput VariableName="User.SQL_switch"/>
            </ExecuteSQL>
<#
}
#>
        </Tasks>
    </Package>
<#}#>
    
    <Package Name="_Master" ProtectionLevel="DontSaveSensitive">
        <Tasks>
            <#
    foreach (string[] initialTable in initialTableList)
    {
        var packageName = $"{initialTable[3]}_{initialTable[1]}";
            #>
                    <ExecutePackage Name="<#=packageName.Replace("."," ")#>">
                       <ExternalProjectPackage Package="<#=$"{packageName}.dtsx"#>"/>
                    </ExecutePackage>
            <#}#>
         </Tasks>
    </Package>
</Packages>
</Biml>